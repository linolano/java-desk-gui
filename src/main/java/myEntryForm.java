import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import org.json.JSONException;
import org.json.JSONObject;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.Iterator;
import java.util.concurrent.CompletableFuture;

public class myEntryForm {

    private JPanel rootPanel;
    private JTextField nameTextField;
    private JButton helloButton;
    private JTable resTable;
    private JLabel resLabel;
    private JLabel resLabelCaption;
    DefaultTableModel model;


    public myEntryForm() {

        model = resTable != null ? (DefaultTableModel) resTable.getModel() : null;

        if (model != null) {
            model.addColumn("key");
            model.addColumn("value");
        }
        if (helloButton != null)
            helloButton.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    String nameTextFieldString = nameTextField.getText();
                    resLabel.setText(nameTextFieldString);
                    resLabel.setForeground(Color.BLUE.darker());
                    resLabel.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
                    resLabelCaption.setText("Fetched ");
                    String url = nameTextField.getText();
                    CompletableFuture<JSONObject> response = null;
                    try {
                        response = getMyUrl(url);
                    } catch (JSONException jsonException) {
                        jsonException.printStackTrace();
                    }
                    response.thenApply(s -> {
                        try {
                            printJsonToTable(s);
                        } catch (Exception jsonException) {
                            jsonException.printStackTrace();
                        }
                        return s;
                    });
                }
            });
        if (resLabel != null)
            resLabel.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    super.mouseClicked(e);
                    try {
                        Desktop.getDesktop().browse(new URI(resLabel.getText()));
                    } catch (URISyntaxException | IOException e1) {
                        e1.printStackTrace();
                    }
                }
            });
    }

    public static void main(String[] args) {
        JFrame frame = new JFrame("myEntryForm");
        frame.setContentPane(new myEntryForm().rootPanel);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
    }

    public void printJsonToTable(JSONObject jsonObject) throws JSONException {
        Iterator x = jsonObject.keys();
        int countRow = 0;
            model.setRowCount(countRow);
        while (x.hasNext()) {
            String key = (String) x.next();

                model.insertRow(countRow, new Object[]{key, jsonObject.get(key)});
            countRow++;
        }
    }

    public CompletableFuture<JSONObject> getMyUrl(String uri) throws JSONException {
        HttpClient client = HttpClient.newHttpClient();
        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(uri))
                .build();
        return client.sendAsync(request, HttpResponse.BodyHandlers.ofString())
                .thenApply(s -> {
                    String entity = s.body();
                    JSONObject o = null;
                    try {
                        o = new JSONObject(entity);
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                    return o;
                });
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        rootPanel = new JPanel();
        rootPanel.setLayout(new GridLayoutManager(5, 2, new Insets(0, 0, 0, 0), -1, -1));
        helloButton = new JButton();
        helloButton.setText("Fetch");
        rootPanel.add(helloButton, new GridConstraints(3, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        nameTextField = new JTextField();
        nameTextField.setText("https://api.nasa.gov/planetary/apod?api_key=DEMO_KEY");
        rootPanel.add(nameTextField, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        resLabelCaption = new JLabel();
        resLabelCaption.setText("");
        rootPanel.add(resLabelCaption, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, new Dimension(-1, 25), null, null, 0, false));
        resLabel = new JLabel();
        resLabel.setText("Label");
        rootPanel.add(resLabel, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        rootPanel.add(scrollPane1, new GridConstraints(4, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        resTable = new JTable();
        resTable.setEditingColumn(-1);
        scrollPane1.setViewportView(resTable);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }
}
